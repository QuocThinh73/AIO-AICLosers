{"metadata":{"kernelspec":{"display_name":"alphaAI","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.12.11"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9278264,"sourceType":"datasetVersion","datasetId":5615567}],"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [markdown]\n# # Using PaddleOCR\n# \n\n# %% [code] {\"execution\":{\"iopub.execute_input\":\"2025-07-23T06:16:28.929389Z\",\"iopub.status.busy\":\"2025-07-23T06:16:28.929116Z\",\"iopub.status.idle\":\"2025-07-23T06:17:06.012868Z\",\"shell.execute_reply\":\"2025-07-23T06:17:06.012131Z\",\"shell.execute_reply.started\":\"2025-07-23T06:16:28.929367Z\"}}\n!pip install paddlepaddle==2.6.1 -q\n!pip install paddleocr==2.8.1 -q\n!pip install opencv-python==4.10.0.82 -q\n\n# %% [code] {\"execution\":{\"iopub.execute_input\":\"2025-07-23T06:17:06.014507Z\",\"iopub.status.busy\":\"2025-07-23T06:17:06.014228Z\",\"iopub.status.idle\":\"2025-07-23T06:17:08.438752Z\",\"shell.execute_reply\":\"2025-07-23T06:17:08.438156Z\",\"shell.execute_reply.started\":\"2025-07-23T06:17:06.014475Z\"}}\nimport gc\nimport cv2\nimport numpy as np\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom paddleocr import PaddleOCR\ngc.collect()\nimport os\nimport json\n\n# %% [code] {\"execution\":{\"iopub.execute_input\":\"2025-07-23T06:18:14.981387Z\",\"iopub.status.busy\":\"2025-07-23T06:18:14.981117Z\",\"iopub.status.idle\":\"2025-07-23T06:18:22.930890Z\",\"shell.execute_reply\":\"2025-07-23T06:18:22.930133Z\",\"shell.execute_reply.started\":\"2025-07-23T06:18:14.981365Z\"}}\ntry:\n    ocr = PaddleOCR(use_angle_cls=True, lang='en', use_gpu=False, det_model_dir=None, rec_model_dir=None)\n    print(\"PaddleOCR initialized successfully.\")\nexcept Exception as e:\n    print(f\"Error initializing PaddleOCR: {e}\")\n    exit()\n\n# %% [code]\nroot_dir = \"/Volumes/Transcend/AIC/AIO-AIClosers/PublicData\"\nkeyframe_folders = [f for f in os.listdir(root_dir) if f.startswith(\"keyframes_L01\")]\nkeyframe_folders\n\n# %% [code]\ndef mask_regions(image, regions):\n    for (x1, y1, x2, y2) in regions:\n        image[y1:y2, x1:x2] = 255\n    return image\n\n# %% [code]\ntarget_size = (1280, 720)\nlogo_box = (1000, 50, 1300, 130)\nbanner_box = (0, 660, 1280, 690)\nmask_boxes = [logo_box, banner_box]\n\nfor keyframe_folder in sorted(keyframe_folders):\n    keyframe_path = os.path.join(root_dir, keyframe_folder)\n    if not os.path.isdir(keyframe_path):\n        continue\n\n    print(f\"\\n📂 Processing keyframe set: {keyframe_folder}\")\n\n    # Tạo folder lưu kết quả theo L (L01, L02, ...)\n    output_dir = os.path.join(\"/Volumes/Transcend/AIC/AIO-AIClosers/PublicData/result\", f\"ocr_results_{keyframe_folder[-3:]}\")\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Duyệt qua các video như L01_V001, L01_V002,...\n    for video_folder in sorted(os.listdir(keyframe_path)):\n        video_path = os.path.join(keyframe_path, video_folder)\n        if not os.path.isdir(video_path):\n            continue\n\n        print(f\"  🎞️ Processing video folder: {video_folder}\")\n        image_files = sorted([\n            f for f in os.listdir(video_path)\n            if f.endswith(\".jpg\") and not f.startswith(\"._\")\n        ])\n\n        ocr_results = []\n\n        for img_name in image_files:\n            img_path = os.path.join(video_path, img_name)\n            try:\n                img = cv2.imread(img_path)\n                if img is None:\n                    raise FileNotFoundError(f\"Image not found: {img_path}\")\n\n                img_resized = cv2.resize(img, target_size)\n                masked_img = mask_regions(img_resized.copy(), mask_boxes)\n                masked_rgb = cv2.cvtColor(masked_img, cv2.COLOR_BGR2RGB)\n\n                result = ocr.ocr(masked_rgb, cls=True)\n\n                frame_result = {\n                    \"image\": img_name,\n                    \"results\": []\n                }\n\n                if result and isinstance(result, list) and len(result) > 0:\n                    for line in result[0]:\n                        frame_result[\"results\"].append({\n                            \"text\": line[1][0],\n                            \"confidence\": line[1][1],\n                            \"box\": line[0]\n                        })\n\n                ocr_results.append(frame_result)\n\n            except Exception as e:\n                print(f\"    ❌ Error processing {img_name}: {e}\")\n                continue\n\n        # Lưu kết quả OCR ra file JSON cho từng video\n        json_filename = f\"{video_folder}.json\"\n        json_path = os.path.join(output_dir, json_filename)\n        with open(json_path, \"w\", encoding=\"utf-8\") as f:\n            json.dump(ocr_results, f, ensure_ascii=False, indent=2)\n\n        print(f\"  ✅ Saved OCR JSON: {json_path}\")\n\nprint(\"\\n🎉 Finished OCR for all keyframe folders.\")\n\n# %% [markdown]\n# # test\n\n# %% [code] {\"execution\":{\"iopub.execute_input\":\"2025-07-23T06:37:43.913626Z\",\"iopub.status.busy\":\"2025-07-23T06:37:43.913080Z\"}}\ndef mask_regions(image, regions):\n    for (x1, y1, x2, y2) in regions:\n        image[y1:y2, x1:x2] = 255  # tô trắng vùng đã chọn\n    return image\n\nimage_dir = \"/kaggle/input/publicdata/PublicData/keyframes_L01/L01_V001\"\nimage_files = [f for f in os.listdir(image_dir) if f.endswith(\".jpg\")]\nimage_paths = [os.path.join(image_dir, f) for f in image_files]\n\ntarget_size = (1280, 720)\n\nlogo_box = (1000, 50, 1300, 130)\nbanner_box = (0, 660, 1280, 690)\nmask_boxes = [logo_box, banner_box]\n\nfor img_path in image_paths:\n    try:\n        print(f\"Processing image: {img_path}\")\n\n        img = cv2.imread(img_path)\n        if img is None:\n            raise FileNotFoundError(f\"Image not found: {img_path}\")\n\n        img_resized = cv2.resize(img, target_size)\n\n        masked_img = mask_regions(img_resized.copy(), mask_boxes)\n        masked_rgb = cv2.cvtColor(masked_img, cv2.COLOR_BGR2RGB)\n\n        plt.figure(figsize=(12, 6))\n        plt.imshow(masked_rgb)\n        plt.axis('off')\n        plt.title(f\"Masked Image: {os.path.basename(img_path)}\")\n        plt.show()\n        plt.close()\n        # Bắt đầu OCR\n        print(\"Starting OCR prediction...\")\n        result = ocr.ocr(masked_rgb, cls=True)\n        print(\"OCR prediction completed.\")\n\n        # Lưu kết quả\n        extracted_text = \"\"\n        if result and isinstance(result, list) and len(result) > 0:\n            for line in result[0]:\n                text = line[1][0]\n                confidence = line[1][1]\n                extracted_text += f\"{text} (Confidence: {confidence:.2f})\\n\"\n                print(f\"Text: {text}, Confidence: {confidence:.2f}\")\n        else:\n            print(\"No text detected in the image.\")\n            extracted_text = \"No text detected.\"\n\n        filename = os.path.splitext(os.path.basename(img_path))[0]\n        output_file = f\"/kaggle/working/{filename}_extracted_text.txt\"\n        with open(output_file, \"w\") as file:\n            file.write(extracted_text)\n        print(f\"Text saved to {output_file}\")\n\n    except Exception as e:\n        print(f\"Error processing {img_path}: {e}\")\n        continue\n\n    # Clean up memory\n    del img_resized, masked_img, result\n    gc.collect()\n\nprint(\"✅ Finished processing all images.\")\n\n\n# %% [code]\n","metadata":{"_uuid":"f11a16b3-53cb-4064-86ba-43adfd19f57a","_cell_guid":"2c3137de-e5a9-4bab-9f0f-6c07639785bf","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}